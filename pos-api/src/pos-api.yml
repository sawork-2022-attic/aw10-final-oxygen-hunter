openapi: "3.0.3"
info:
  version: 0.0.1
  title: MicroPoS
  license:
    name: MIT
servers:
  - url: http://localhost:8080/api
paths:
  /carts:
    get:
      summary: List all carts
      operationId: listCarts
      tags:
        - carts
      responses:
        '200':
          description: An array of carts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Carts"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - carts
      operationId: createCart
      summary: Create a new cart
      requestBody:
        description: An empty cart
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
        required: true
      responses:
        201:
          description: The cart was successfully added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cart'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Cart not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /carts/{cartId}:
    get:
      summary: Info for a specific cart
      operationId: showCartById
      tags:
        - cart
      parameters:
        - name: cartId
          in: path
          required: true
          description: The id of the cart to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
    post:
      summary: Add an item to cart
      operationId: addItemToCart
      tags:
        - cart
      parameters:
        - name: cartId
          in: path
          required: true
          description: The id of the cart to retrieve
          schema:
            type: string
      requestBody:
        description: The details of the item.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CartItem'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Cart"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /carts/{cartId}/total:
    get:
      summary: Total for a specific cart
      operationId: showCartTotal
      tags:
        - cart
      parameters:
        - name: cartId
          in: path
          required: true
          description: The id of the cart to get total
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: number
                format: double
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /carts/{cartId}/checkout:
    post:
      summary: checkout cart, generate an order
      operationId: checkoutCart
      tags:
        - cart
      parameters:
        - name: cartId
          in: path
          required: true
          description: The id of the cart to checkout
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

  /orders:
    get:
      summary: List all orderss
      operationId: listOrders
      tags:
        - orders
      responses:
        '200':
          description: An array of orders
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Orders"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - orders
      operationId: createOrder
      summary: Create a new order from a cart
      requestBody:
        description: A cart
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
        required: true
      responses:
        201:
          description: The order was successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        400:
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: Order not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        500:
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /orders/{orderId}:
    get:
      summary: Info for a specific order
      operationId: showOrderById
      tags:
        - order
      parameters:
        - name: orderId
          in: path
          required: true
          description: The id of the order to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
  /products:
    get:
      summary: List all products
      operationId: listProducts
      tags:
        - products
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: page number
        - in: query
          name: keyword
          schema:
            type: string
          description: product keyword
      responses:
        '200':
          description: A paged array of products
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Products"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /products/{productId}:
    get:
      summary: Info for a specific product
      operationId: showProductById
      tags:
        - product
      parameters:
        - name: productId
          in: path
          required: true
          description: The id of the product to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /counter/checkout:
    post:
      summary: checkout a cart
      operationId: checkout
      tags:
        - counter
      requestBody:
        description: The cart to checkout.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
        required: true
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                type: number
                format: double
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /delivery:
    get:
      summary: List all delivery
      operationId: listDelivery
      tags:
        - delivery
      responses:
        '200':
          description: A paged array of delivery
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryEntries"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /delivery/{orderId}:
    get:
      summary: Info for a specific delivery entry
      operationId: showDeliveryByOrderId
      tags:
        - entry
      parameters:
        - name: orderId
          in: path
          required: true
          description: The id of the order to retrieve
          schema:
            type: string
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DeliveryEntry"
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  schemas:
    Carts:
      type: array
      items:
        $ref: "#/components/schemas/Cart"
    CartItem:
      type: object
      properties:
        amount:
          type: integer
          format: int32
        product:
          $ref: "#/components/schemas/Product"
    Cart:
      type: object
      properties:
        id:
          type: string
        items:
          type: array
          items:
            $ref: "#/components/schemas/CartItem"
    Orders:
      type: array
      items:
        $ref: "#/components/schemas/Order"
    OrderItem:
      type: object
      properties:
        amount:
          type: integer
          format: int32
        product:
          $ref: "#/components/schemas/Product"
    Order:
      type: object
      properties:
        id:
          type: string
        time:
          type: string
        items:
          type: array
          items:
            $ref: "#/components/schemas/OrderItem"
    DeliveryEntries:
      type: array
      items:
        $ref: "#/components/schemas/DeliveryEntry"
    DeliveryEntry:
      type: object
      properties:
        id:
          type: string
        orderId:
          type: string
        status:
          type: string
    Product:
      type: object
      required:
        - id
        - name
        - price
      properties:
        id:
          type: string
        name:
          type: string
        price:
          type: number
          format: double
        image:
          type: string
    Products:
      type: array
      items:
        $ref: "#/components/schemas/Product"
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
  responses:
    NullResponse:
      description: Null response
    UnexpectedError:
      description: unexpected error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"